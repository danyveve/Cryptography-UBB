const alphabetToNumber = new Map([
    [' ', 0],
    ['a', 1],
    ['b', 2],
    ['c', 3],
    ['d', 4],
    ['e', 5],
    ['f', 6],
    ['g', 7],
    ['h', 8],
    ['i', 9],
    ['j', 10],
    ['k', 11],
    ['l', 12],
    ['m', 13],
    ['n', 14],
    ['o', 15],
    ['p', 16],
    ['q', 17],
    ['r', 18],
    ['s', 19],
    ['t', 20],
    ['u', 21],
    ['v', 22],
    ['w', 23],
    ['x', 24],
    ['y', 25],
    ['z', 26]]);

const numberToAlphabet = new Map([
    [0, ' '],
    [1, 'a' ],
    [2, 'b' ],
    [3, 'c' ],
    [4, 'd' ],
    [5, 'e' ],
    [6, 'f' ],
    [7, 'g' ],
    [8, 'h' ],
    [9, 'i' ],
    [10, 'j' ],
    [11, 'k' ],
    [12, 'l' ],
    [13, 'm' ],
    [14, 'n' ],
    [15, 'o' ],
    [16, 'p' ],
    [17, 'q' ],
    [18, 'r' ],
    [19, 's' ],
    [20, 't' ],
    [21, 'u' ],
    [22, 'v' ],
    [23, 'w' ],
    [24, 'x' ],
    [25, 'y' ],
    [26, 'z' ]]);

function repeatedSquaringModularExponentiationMethod(base, power, n) {
    var result = 1;
    var x = base;
    while (power) { // we will be extracting the least significant bit form the power and fill with 0 at the end (in the end the power will become 0000000)
        if (power & 1) { // if the least signifficant bit is 1
            result = (result * x) % n; // then we need to multiply with x which is actually the base to the power of two corresponding to the position of the bit
        }
        x = (x * x) % n; //update the base squared for future computations
        power >>>= 1;
    }
    return result;
}

function euclidGcd(a, b) {
    while (b !== 0) {
        var t = b;
        b = a % b;
        a = t;
    }
    return a;
}

function getRandomArbitrary(min, max) {
    return Math.trunc(Math.random() * (max - min) + min);
}


function inverse(a, n) {
    var t = 0;
    var r = n;
    var newt = 1;
    var newr = a;

    while (newr !== 0) {
        var quotient = Math.trunc(r / newr);
        tcopy = t;
        rcopy = r;

        t = newt;
        newt = tcopy - quotient * newt;

        r = newr;
        newr = rcopy - quotient * newr;

        console.log("t=" + t);
        console.log("r=" + r);
        console.log("tcopy=" + tcopy);
        console.log("rcopy" + rcopy);
        console.log("newt" + newt);
        console.log("newr" + newr);
        console.log("\n");
        console.log("\n");
    }

    if (r > 1) {
        return "error";
    }

    if (t < 0) {
        t = t + n;
    }

    return t;
}

var primes = [8011,1663,8933,8731,2909,8713,8161,1543,4159,1483,3511,6569,3539,8093,2243,5393,6661,3001,3947,4733,5197,6481,1753,6037,7759,3343,4409,5851,4447,6271,1459,1063,9767,1433,6991,2647,5003,6869,9041,6229,2377,4073,8317,3467,7547,4861,3919,4933,7951,5153,8287,8819,1619,4177,7013,1237,2003,4423,1901,4019,6571,7549,3187,4817,4813,4373,3527,9521,6217,3191,1201,6389,9241,3257,4649,3089,3907,4931,6491,3079,4801,2549,7517,7297,4463,2437,8053,7057,5437,7039,8719,3109,6173,5827,5233,1889,6367,9403,6197,3793,3967,3083,3557,4229,7219,2803,4903,1021,5051,4721,9323,3449,4297,8423,6607,3881,9281,2687,6361,9769,3329,6449,8101,7321,3229,9689,4289,7643,7393,1697,2081,5717,9619,4259,3671,9011,9277,2801,9491,3019,2341,5801,6287,9631,2593,4139,2971,9157,6221,9421,5471,9349,4957,7247,5189,4337,9337,2777,6329,8677,4079,2053,2689,8839,4253,2309,4723,4093,3547,3677,1913,9623,2963,1847,7559,6841,9227,5011,2143,8779,9787,9739,3271,7591,7741,2699,1667,4729,2767,3617,7487,2731,8969,8117,8623,5119,1951,4567,3533,1259,9173,2089,8647,8263,5563,2693,1039,4691,6521,2819,4127,6899,3779,6143,4973,6131,5653,3863,3943,3361,9791,8737,3413,1087,4547,9931,9539,5279,7477,7561,7211,3461,8537,1811,8147,5897,9293,3221,1019,7253,8059,1873,2389,3593,6089,8171,2381,6113,6421,3037,9479,4603,1607,3469,2131,5879,7793,2851,5323,3727,4871,5923,4013,5419,6823,3923,2683,6277,2657,9661,1277,3391,8243,7883,1759,2423,6997,4759,3583,6073,1423,9059,5477,4357,2897,5741,2203,9551,4663,9209,1789,1429,4217,9817,3929,5519,1231,4231,1579,2749,2591,1303,3463,9629,7207,4993,3823,5927,4639,1949,5791,1489,7129,2039,8669,9319,2287,2617,3631,8209,4831,3623,9677,6211,3517,9239,4493,8741,5417,1229,5113,9461,4987,2137,6803,8191,5657,1987,8111,9431,1129,4943,1153,5479,7639,1493,9433,1877,6053,3673,9649,9007,8431,7607,2633,9851,6007,8089,6673,4457,8887,7879,6733,6737,6959,5591,6079,7901,1559,9857,9697,7417,1637,5309,3529,2711,1009,8387,1171,4243,1297,3701,9547,2833,4951,4133,7001,1283,7079,6247,1049,5659,6947,5849,3023,1747,8501,8627,2153,2927,3821,1181,7193,5843,3359,8761,5569,9613,4363,6397,4789,2239,6199,2957,8849,7489,8693,7027,4787,8783,8597,8689,8573,7043,6473,9721,6911,7963,3433,9199,7127,8329,5987,6793,2281,2111,3571,1571,1321,8513,1999,3767,7573,1609,2293,2297,8941,8087,5059,5009,7907,5641,5867,4003,1601,4211,1973,6379,2797,8923,6091,1381,2531,7919,4049,4327,3011,2017,6011,8803,4513,3803,4021,3319,6967,9013,3251,6829,7933,4937,4153,6761,1427,2273,2311,3373,8179,3137,4657,4481,1319,7993,8009,2399,1097,5669,5147,1291,9929,7727,2663,2029,8837,3989,1481,3301,9923,5399,6581,6553,2237,8233,6353,8081,9187,7589,6983,4799,9907,3659,8311,2351,3253,2441,7019,3119,4583,5623,7669,9473,6427,7459,4001,6343,2609,3163,3491,2113,1907,9829,9901,9679,9137,7703,6547,6599,2969,4007,3833,4483,6703,5981,8419,4877,1709,7187,6701,3853,9091,4111,9043,5413,3347,8353,1193,2551,8971,1447,9871,2557,2729,6659,2069,7757,7121,4273,1861,5743,6299,2999,6373,9967,2791,5387,7177,1093,4673,8807,7867,2221,7603,8563,1699,3389,9533,5087,5347,9049,9601,3847,8663,6563,6043,5869,8237,2467,5779,4271,9833,7829,4451,4517,9103,2141,4703,9463,2539,2861,6067,3061,1823,5821,5813,5683,2671,5231,6029,8999,4909,4057,6779,6577,5749,5167,4099,6163,5807,1091,5237,3911,7937,2411,5443,1583,1399,8707,5939,1933,8867,5557,2447,4391,1627,5099,3691,6863,6833,3121,1487,9883,9439,7283,6311,1597,1783,3559,5431,9467,7529,2677,7309,9133,6317,1409,6827,5303,8609,9109,8167,6691,5737,1499,4591,1061,5281,1693,2741,5023,5857,5333,8377,9811,1123,9587,6971,7817,9203,8521,3917,1621,9749,4793,1511,9161,5501,5503,1069,9221,3203,7949,8893,3877,7159,7433,1117,1367,4339,4919,2843,9733,7691,7823,6047,9743,5689,8297,8581,5441,8221,3407,9377,7213,6637,2579,6791,9419,2789,7451,3643,1613,4969,5261,4283,2837,7673,8543,8389,9067,1787,2161,2347,1151,5903,7877,4651,8681,7681,9643,9283,5953,7103,1439,7331,1993,3797,2473,6907,3049,5101,1289,3709,8951,2339,3581,8753,7333,1741,4507,8293,7541,6763,9391,2357,8291,9311,3299,2371,9001,3371,2713,8861,6949,9497,2879,9181,1033,9941,3167,4157,7229,6101,3457,5171,5407,1931,3697,8017,1307,8747,2543,6151,7237,5297,9973,5081,7411,2027,4597,2333,5077,1163,7537,1471,6301,4051,1669,4397,1567,1373,2011,4967,2383,3719,3637,8273,3769,1879,5449,1997,1721,6323,1109,1531,3613,4441,5483,8963,8039,6619,4679,4751,6719,6781,1831,9949,7577,2099,9803,8447,3209,6269,5273,4561,7351,2659,2083,5107,5039,5861,7457,7841,6709,7723,6469,7621,1279,5701,2213,9511,5521,4523,9437,4889,5647,2917,2417,7717,6529,8699,8369,8363,1657,3181,1051,3761,4349,4519,2887,2857,2459,9029,4219,8123,7243,4261,1801,8443,5693,8069,7789,3541,5179,1361,2719,4999,2903,9371,1723,7523,9257,6337,8539,5531,8641,2179,8467,7307,2207,7109,3067,3739,6917,3169,6121,7481,7369,2621,7927,2269,3931,3323,9839,3259,9343,5227,5381,3607,7583,2521,4027,8831,3041,7507,5351,4091,3307,3499,4201,1553,1867,5639,3331,9887,5209,5783,3733,6263,4621,8599,8429,6679,7349,7151,2393,5881,7853,1013,4549,5581,1453,1223,5711,3313,9413,8821,6961,5527,1979,2753,8231,7499,1327,6551,1733,8269,1301,6883,7699,4241,2129];